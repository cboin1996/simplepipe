version: "3"

silent: true

vars:
  CLUSTER_NAME: simplepipe-cluster
  KUBE_PROM_NAMESPACE: monitoring
  KUBE_PROM_NAME: kube-prometheus-stack
  INGRESS_NGINX_NAME: ingress-nginx
  INGRESS_NGINX_NAMESPACE: ingress-nginx
  ALICE_NAMESPACE: alice
  BOB_NAMESPACE: bob
  PROM_PUSHGW_NAME_ALICE: prometheus-pushgateway-alice
  PROM_PUSHGW_NAME_BOB: prometheus-pushgateway-bob

  APP_NAME: simplepipe
  HELM_VERS: v3.8.0
  PUSH_GATEWAY_VERS: 1.4.2

tasks:
  install:
    prefix: install
    desc: |
      will perform installation of a cluster using k3d, and install necessary 
      dependencies if they are not detected within /usr/local/bin on your machine.
    deps: [helm:install]
    cmds:
      - task: k3d:create
      - task: kube-prom:install
      - task: prom-push-gw:install
      - task: manifests:install
      - task: k8s:createconfigMap

  uninstall:
    prefix: uninstall
    desc: |
      will perform uninstallation of a cluster using k3d.
    cmds:
      - task: k3d:destroy

  build:local:
    prefix: build
    desc: |
      builds the application locally, and loads into the cluster.
    cmds:
      - docker build -t {{.APP_NAME}} .
      - k3d image import {{.APP_NAME}} -c {{.CLUSTER_NAME}}

  k3d:create:
    prefix: k3d > create
    desc: create a k3d cluster, using the name {{.CLUSTER_NAME}}
    cmds:
      - k3d cluster create {{.CLUSTER_NAME}}

  k3d:destroy:
    prefix: k3d < destroy
    desc: destroy the k3d cluster with name {{.CLUSTER_NAME}}
    cmds:
      - k3d cluster delete {{.CLUSTER_NAME}}

  k3d:start:
    prefix: k3d > start
    desc: start the k3d cluster, using the name {{.CLUSTER_NAME}}
    cmds:
      - "k3d cluster start {{.CLUSTER_NAME}}"

  k3d:stop:
    prefix: k3d > stop
    desc: start the k3d cluster, with the name {{.CLUSTER_NAME}}
    cmds:
      - "k3d cluster stop {{.CLUSTER_NAME}}"

  helm:install:
    prefix: helm < install
    desc: installs helm, using version {{.HELM_VERS}} if it does not exist in /usr/local/bin/ already.
    cmds:
      - wget -O helm{{.HELM_VERS}}.tar.gz https://get.helm.sh/helm-{{.HELM_VERS}}-{{OS}}-amd64.tar.gz
      - tar -zxvf helm{{.HELM_VERS}}.tar.gz
      - sudo mv {{OS}}-amd64/helm /usr/local/bin/helm
      - rm helm{{.HELM_VERS}}.tar.gz
      - rm -rf {{OS}}-amd64
    status:
      - test -f /usr/local/bin/helm

  helm:uninstall:
    prefix: helm > uninstall
    desc: |
      Uninstalls helm, by deleting the binary from /usr/local/bin. This assumes that
      helm has been installed using this task file, in /usr/local/bin folder on macOS or linux.
    cmds:
      - sudo rm /usr/local/bin/helm

  kube-prom:install:
    prefix: kube-prom > install
    desc: |
      installs the kube-prometheus stack, version {{.KUBE_PROM_NAME}}. Assumes that this has not already been installed.
      Note that the two --set arguments are described under heading 'prometheus.io/scrape' 
      here: https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
    cmds:
      - kubectl create ns {{.KUBE_PROM_NAMESPACE}}
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo update
      - |
        helm install {{.KUBE_PROM_NAME}} -n {{.KUBE_PROM_NAMESPACE}} prometheus-community/kube-prometheus-stack \
        --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false \
        --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false

  kube-prom:uninstall:
    prefix: helmcharts < uninstall
    desc: uninstalls all charts associated with {{.KUBE_PROM_NAME}}
    cmds:
      - helm uninstall -n {{.KUBE_PROM_NAMESPACE}} {{.KUBE_PROM_NAME}}
      - kubectl delete ns {{.KUBE_PROM_NAMESPACE}}

  prom-push-gw:install:
    prefix: prom-push-gw > install
    desc: installs prometheus push gatewaty into namespaces alice and bob
    cmds:
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo update
      - helm install {{.PROM_PUSHGW_NAME_ALICE}} prometheus-community/prometheus-pushgateway -n {{.ALICE_NAMESPACE}} --create-namespace
      - helm install {{.PROM_PUSHGW_NAME_BOB}} prometheus-community/prometheus-pushgateway -n {{.BOB_NAMESPACE}} --create-namespace

  prom-push-gw:uninstall:
    prefix: prom-push-gw < uninstall
    desc: uninstalls all charts associated with prometheus push gateway
    cmds:
      - helm uninstall {{.PROM_PUSHGW_NAME_ALICE}} -n {{.ALICE_NAMESPACE}}
      - helm uninstall {{.PROM_PUSHGW_NAME_BOB}} -n {{.BOB_NAMESPACE}}
      - kubectl delete ns {{.ALICE_NAMESPACE}}
      - kubectl delete ns {{.BOB_NAMESPACE}}

  manifests:install:
    prefix: argo > install
    desc: installs argo workflow to the currently active cluster in the 'argo' namespace
    cmds:
      - kustomize build manifests | kubectl apply -f -
      - task: argo:minio-cred

  manifests:uninstall:
    prefix: argo < uninstall
    desc: |
      uninstalls argo workflow from the currently active cluster by deleting
      the argo namespace
    cmds:
      - kubectl delete ns argo

  argo:minio-cred:
    prefix: argo > minio-cred
    desc: copies the minio cred across the user namespaces
    cmds:
      - kubectl get secret -n argo my-minio-cred -o yaml | yq -P '.metadata.namespace |= "alice"' - | kubectl apply -f -
      - kubectl get secret -n argo my-minio-cred -o yaml | yq -P '.metadata.namespace |= "bob"' - | kubectl apply -f -

  k8s:createconfigMap:
    prefix: k8s > createconfigMap
    desc: |
      Creates a configMap from an expected .env configuration file. 
      Please see default.env as an example configuration.
    cmds:
      - kubectl create configmap {{.APP_NAME}}-config -n {{.ALICE_NAMESPACE}} --from-env-file=./images/simplepipe/.env
      - kubectl create configmap {{.APP_NAME}}-config -n {{.BOB_NAMESPACE}} --from-env-file=./images/simplepipe/.env

  k8s:updateConfigMap:
    prefix: k8s > createconfigMap
    desc: |
      Creates a configMap from an expected .env configuration file. 
      Please see default.env as an example configuration.
    cmds:
      - task: k8s:deleteconfigMap
      - task: k8s:createconfigMap

  k8s:deleteconfigMap:
    prefix: k8s < deleteConfigMap
    desc: |
      Deletes the config maps from the cluster
    cmds:
      - kubectl delete configmap -n {{.ALICE_NAMESPACE}} {{.APP_NAME}}-config
      - kubectl delete configmap -n {{.BOB_NAMESPACE}} {{.APP_NAME}}-config

  password:argo:
    prefix: password > argo
    desc: get the login password for argo, and put it in clipboard
    cmds:
      - echo "Bearer {{.TOKEN}}" | xsel -i -b
    vars:
      SECRET_NAME: 
        sh: kubectl get sa argo -n argo -o jsonpath='{.secrets[0].name}'
      TOKEN: 
        sh: kubectl get secret -n argo {{.SECRET_NAME}} -o jsonpath='{.data.token}' | base64 -d

  argocli:install:
    prefix: arcocli > install
    desc: installs the argocli, version 3.2.8
    cmds:
      - curl -sLO https://github.com/argoproj/argo-workflows/releases/download/v3.2.8/argo-linux-amd64.gz
      - gunzip argo-linux-amd64.gz
      - chmod +x argo-linux-amd64
      - sudo mv ./argo-linux-amd64 /usr/local/bin/argo

  argocli:uninstall:
    prefix: arcocli < uninstall
    desc: uninstalls the argocli, removing from /usr/local/bin
    cmds:
      - sudo rm /usr/local/bin/argo 