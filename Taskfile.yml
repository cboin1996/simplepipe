version: '3'

silent: true

vars:
  CLUSTER_NAME: simplepipe-cluster
  KUBE_PROM_NAME: kube-prom
  PROM_PUSHGW_NAME: prom-pushgw
  HELM_VERS: v3.8.0
  PUSH_GATEWAY_VERS: 1.4.2

tasks:
  install:
    prefix: install
    desc: |
      will perform installation of a cluster using k3d, and install necessary 
      dependencies if they are not detected within /usr/local/bin on your machine.
    deps: [helm:install]
    cmds:
      - task: k3d:create
      - task: kube-prom:install
      - task: argo:install
      - task: roles:configure
      - task: prom-push-gw:install

  build:local:
    prefix: build
    desc: |
      builds the application locally, and loads into the cluster.
    cmds:
      - docker build -t simplepipe . 
      - k3d image import simplepipe -c {{.CLUSTER_NAME}}

  k3d:create:
    prefix: k3d > create
    desc: create a k3d cluster, using the name {{.CLUSTER_NAME}}
    cmds:
      - k3d cluster create {{.CLUSTER_NAME}}
  
  k3d:destroy:
    prefix: k3d < destroy
    desc: destroy the k3d cluster with name {{.CLUSTER_NAME}}
    cmds:
      - k3d cluster delete {{.CLUSTER_NAME}}
  
  k3d:start:
    prefix: k3d > start
    desc:  start the k3d cluster, using the name {{.CLUSTER_NAME}}
    cmds:
    - "k3d cluster start {{.CLUSTER_NAME}}"

  k3d:stop:
    prefix: k3d > stop
    desc: start the k3d cluster, with the name {{.CLUSTER_NAME}}
    cmds:
    - "k3d cluster stop {{.CLUSTER_NAME}}"

  helm:install:
    prefix: helm < install
    desc: installs helm, using version {{.HELM_VERS}} if it does not exist in /usr/local/bin/ already.
    cmds:
      - wget -O helm{{.HELM_VERS}}.tar.gz https://get.helm.sh/helm-{{.HELM_VERS}}-{{OS}}-amd64.tar.gz
      - tar -zxvf helm{{.HELM_VERS}}.tar.gz
      - sudo mv {{OS}}-amd64/helm /usr/local/bin/helm
      - rm helm{{.HELM_VERS}}.tar.gz
      - rm -rf {{OS}}-amd64
    status:
      - test -f /usr/local/bin/helm

  helm:uninstall:
    prefix: helm > uninstall
    desc: |
      Uninstalls helm, by deleting the binary from /usr/local/bin. This assumes that
      helm has been installed using this task file, in /usr/local/bin folder on macOS or linux.
    cmds:
      - sudo rm /usr/local/bin/helm

  kube-prom:install:
    prefix: kube-prom > install
    desc: |
      installs the kube-prometheus stack, version {{.KUBE_PROM_NAME}}. Assumes that this has not already been installed.
      Note that the two --set arguments are described under heading 'prometheus.io/scrape' 
      here: https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack
    cmds:
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo update
      - |
        helm install {{.KUBE_PROM_NAME}} prometheus-community/kube-prometheus-stack \
        --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false \
        --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false
    
  kube-prom:uninstall:
    prefix: helmcharts < uninstall
    desc: uninstalls all charts associated with {{.KUBE_PROM_NAME}}
    cmds:
      - helm uninstall {{.KUBE_PROM_NAME}}
    
  prom-push-gw:install:
    prefix: prom-push-gw > install
    desc: installs prometheus push gateway
    cmds:
      - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      - helm repo update
      - helm install {{.PROM_PUSHGW_NAME}} prometheus-community/prometheus-pushgateway

  prom-push-gw:uninstall:
    prefix: prom-push-gw < uninstall
    desc: uninstalls all charts associated with {{.PU}}
    cmds:
      - helm uninstall {{.PROM_PUSHGW_NAME}}

  prometheus:portfwd:
    prefix: prometheus > portfwd
    desc: |
          serves prometheus UI through port 9090.
    cmds:
      - kubectl port-forward svc/simplepipe-kube-prometheus-prometheus 9090:9090

  grafana:portfwd:
    prefix: grafana > portfwd
    desc: |
          sets up the grafana interface to be served through port 3000. 
          The kube-prometheus stack comes preinstalled with grafana, with
          service name 'kube-prom-stack-grafana'.
          Alternatively, one can use k9s and port forward through the 
          interface using shift-f while hovering over the server.
    cmds:
      - kubectl port-forward deployment/{{.KUBE_PROM_NAME}}-grafana 3000:3000

  argo:install:
    prefix: argo > install
    desc: installs argo workflow to the currently active cluster in the 'argo' namespace
    cmds:
      - kubectl create ns argo
      - kubectl apply -n argo -f https://raw.githubusercontent.com/argoproj/argo-workflows/master/manifests/quick-start-postgres.yaml

  argo:uninstall:
    prefix: argo < uninstall
    desc: uninstalls argo workflow from the currently active cluster in the 'argo' namespace
    cmds:
      - kubectl delete -n argo -f https://raw.githubusercontent.com/argoproj/argo-workflows/master/manifests/quick-start-postgres.yaml
      - kubectl delete ns argo

  argo:portfwd:
    prefix: argo > portfwd
    desc: |
          sets up the server interface to be served through port 2746. 
          Alternatively, one can use k9s and port forward through the 
          interface using shift-f while hovering over the server.
    cmds:
      - kubectl port-forward deployment/argo-server 2746:2746

  k8s:apply:
    prefix: kubectl > applyall
    desc: |
          Applies all configuration yaml to the cluster
    cmds:
      - kubectl apply -f manifests/roles
      - kubectl apply -f manifests/servicemonitors
  
  k8s:delete:
    prefix: kubectl < destroy
    desc: |
          Applies all configuration yaml to the cluster
    cmds:
      - kubectl delete -f config/roles
      - kubectl delete -f config/servicemonitors